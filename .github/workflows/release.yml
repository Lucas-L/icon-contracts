name: release

# 1. Run unit and integration tests
# 2. Push containers to AWS ECR and dockerhub tagged with release
# 3. Recommit an update to the chart's deployments with the updated build number in the `deployment` branch

on:
  release:
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start DB
        run: docker-compose -f docker-compose.db.yml up -d

      - name: Install requirements
        run: pip3 install -r requirements.txt -r requirements_dev.txt

      - name: Add workspace to path
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Init DB
        run: |
          cd icon_contracts
          alembic upgrade head
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: changethis
          POSTGRES_DATABASE: app
          POSTGRES_SERVER: localhost

      - name: Run tests
        run: python3 -m pytest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: changethis
          POSTGRES_DATABASE: app
          POSTGRES_SERVER: localhost

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_WORKER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_WORKER }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr-worker
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag name
        id: source
        run: |
          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-api.outputs.registry }}
          ECR_REPOSITORY: icon-contracts
          IMAGE_TAG: ${{ steps.source.outputs.TAG }}
        run: |
          docker build --build-arg SERVICE_NAME=api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update prod-mainnet deployment values file and re-commit
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'chart/deployments/dev-mainnet/values.dev.yaml'
          propertyPath: 'deployment.image.tag'
          value: ${{ github.run_number }}
          branch: deployment
          targetBranch: main
          createPR: 'false'
          message: 'Update prod deployment image version to ${{ github.run_number }}'
          token: ${{ secrets.GITHUB_TOKEN }}
